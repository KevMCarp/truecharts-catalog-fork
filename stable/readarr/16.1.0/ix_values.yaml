image:
  repository: tccr.io/truecharts/readarr
  pullPolicy: IfNotPresent
  tag: v0.2.3.1955@sha256:f906550b9e4c8efc42a3bb37c629cb7e01189bd9c1448d8e340b7d031a18884d
exportarrImage:
  repository: tccr.io/truecharts/exportarr
  pullPolicy: IfNotPresent
  tag: v1.5.3@sha256:f369a43b28410f12ce1b96f52187dd5c6fb9769a137ecc6f7ab8fdcfbe7db58e

securityContext:
  container:
    readOnlyRootFilesystem: false

service:
  main:
    ports:
      main:
        port: 8787
  metrics:
    enabled: true
    type: ClusterIP
    targetSelector: exportarr
    ports:
      metrics:
        enabled: true
        port: 8788
        targetSelector: exportarr

workload:
  main:
    podSpec:
      containers:
        main:
          probes:
            liveness:
              enabled: true
              ## Set this to true if you wish to specify your own livenessProbe
              custom: true
              ## The spec field contains the values for the default livenessProbe.
              ## If you selected custom: true, this field holds the definition of the livenessProbe.
              spec:
                exec:
                  command:
                    - /usr/bin/env
                    - bash
                    - -c
                    - curl --fail localhost:8787/api/v1/system/status?apiKey=`IFS=\> && while read -d \< E C; do if [[ $E = "ApiKey" ]]; then echo $C; fi; done < /config/config.xml`
                failureThreshold: 5
                initialDelaySeconds: 60
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 10
          env:
            READARR__PORT: "{{ .Values.service.main.ports.main.port }}"
  exportarr:
    enabled: true
    type: Deployment
    strategy: RollingUpdate
    replicas: 1
    podSpec:
      containers:
        exportarr:
          primary: true
          enabled: true
          imageSelector: exportarrImage
          args:
            - readarr
          probes:
            liveness:
              enabled: true
              type: http
              path: /healthz
              port: "{{ .Values.service.metrics.ports.metrics.port }}"
            readiness:
              enabled: true
              type: http
              path: /healthz
              port: "{{ .Values.service.metrics.ports.metrics.port }}"
            startup:
              enabled: true
              type: http
              path: /healthz
              port: "{{ .Values.service.metrics.ports.metrics.port }}"
          env:
            INTERFACE: 0.0.0.0
            PORT: "{{ .Values.service.metrics.ports.metrics.port }}"
            URL: "http://localhost:{{ .Values.service.main.ports.main.port }}"
            # additional metrics (slow)
            # ENABLE_ADDITIONAL_METRICS: false
            # enable gathering unknown queue items
            # ENABLE_UNKNOWN_QUEUE_ITEMS: false
            CONFIG: "/config/config.xml"

persistence:
  config:
    enabled: true
    targetSelector:
      main:
        main:
          mountPath: /config
      exportarr:
        exportarr:
          mountPath: /config
          readOnly: true

metrics:
  main:
    enabled: true
    type: "servicemonitor"
    endpoints:
      - port: metrics
        path: /metrics
    prometheusRule:
      enabled: false

portal:
  open:
    enabled: true
